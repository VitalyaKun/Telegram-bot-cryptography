import telebot
from telebot import types
import math

import random
import string
import re

bot = telebot.TeleBot('')

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
leng = types.ReplyKeyboardMarkup(resize_keyboard=True)
leng_en = types.KeyboardButton('English languageüá∫üá∏')
leng_ru = types.KeyboardButton('–†—É—Å—Å–∫–∏–π —è–∑—ã–∫üá∑üá∫')
leng.add(leng_en)
leng.add(leng_ru)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
cipher_en = types.ReplyKeyboardMarkup(resize_keyboard=True)
simple_replacement = types.KeyboardButton('Simple replacement cipher')
vigenere = types.KeyboardButton('Vigen√®re cipher')
spc_en  = types.KeyboardButton('Simple permutation cipher')
aphine_en = types.KeyboardButton ('Affine cipher')
back_en = types.KeyboardButton('Back')
cipher_en.add(simple_replacement)
cipher_en.add(vigenere)
cipher_en.add(spc_en)
cipher_en.add(aphine_en)
cipher_en.add(back_en)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
cipher_ru = types.ReplyKeyboardMarkup(resize_keyboard=True)
simple_replacement_ru = types.KeyboardButton('–®–∏—Ñ—Ä –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω—ã')
vigenere_ru = types.KeyboardButton('–®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞')
spc_ru  = types.KeyboardButton('–®–∏—Ñ—Ä –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏')
aphine_ru = types.KeyboardButton ('–ê—Ñ–∏–Ω–Ω—ã–π —à–∏—Ñ—Ä')
back_ru = types.KeyboardButton('–ù–∞–∑–∞–¥')
cipher_ru.add(simple_replacement_ru)
cipher_ru.add(vigenere_ru)
cipher_ru.add(spc_ru)
cipher_ru.add(aphine_ru)
cipher_ru.add(back_ru)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∫–∏/–¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è —à–∏—Ñ—Ä–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω—ã EN
sr_en = types.ReplyKeyboardMarkup(resize_keyboard=True)
encrypt_sr_en = types.KeyboardButton('Simple replacement encryption‚ù§Ô∏è')
decrypt_sr_en = types.KeyboardButton('Decryption by simple replacementüíú')
back_to_method_en = types.KeyboardButton('Back to choosing the encryption method')
sr_en.add(encrypt_sr_en)
sr_en.add(decrypt_sr_en)
sr_en.add(back_to_method_en)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∫–∏/–¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è —à–∏—Ñ—Ä–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω—ã RU
sr_ru = types.ReplyKeyboardMarkup(resize_keyboard=True)
encrypt_sr_ru = types.KeyboardButton('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω–æ–π‚ù§Ô∏è')
decrypt_sr_ru = types.KeyboardButton('–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω–æ–πüíú')
back_to_method_ru = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è') 
sr_ru.add(encrypt_sr_ru)
sr_ru.add(decrypt_sr_ru)
sr_ru.add(back_to_method_ru)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∫–∏/–¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞ EN
vig_en = types.ReplyKeyboardMarkup(resize_keyboard=True)
encrypt_vig_en = types.KeyboardButton('Encryption by Vigen√®re‚ù§Ô∏è')
decrypt_vig_en = types.KeyboardButton('Decryption by Vigen√®reüíú')
back_to_method_en_for_vig = types.KeyboardButton('Back to list')
vig_en.add(encrypt_vig_en)
vig_en.add(decrypt_vig_en)
vig_en.add(back_to_method_en_for_vig)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∫–∏/–¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞ RU
vig_ru = types.ReplyKeyboardMarkup(resize_keyboard=True)
encrypt_vig_ru = types.KeyboardButton('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –í–∏–∂–µ–Ω–µ—Ä–æ–º‚ù§Ô∏è')
decrypt_vig_ru = types.KeyboardButton('–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –í–∏–∂–µ–Ω–µ—Ä–æ–ºüíú')
back_to_method_ru_for_vig = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥') 
vig_ru.add(encrypt_vig_ru)
vig_ru.add(decrypt_vig_ru)
vig_ru.add(back_to_method_ru_for_vig)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∫–∏/–¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞ EN
per_en = types.ReplyKeyboardMarkup(resize_keyboard=True)
encrypt_per_en = types.KeyboardButton('Encryptionüìï')
decrypt_per_en = types.KeyboardButton('Decryptionüìó')
back_to_method_en_for_per = types.KeyboardButton('Back to listüö™')
per_en.add(encrypt_per_en)
per_en.add(decrypt_per_en)
per_en.add(back_to_method_en_for_per)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∫–∏/–¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞ RU
per_ru = types.ReplyKeyboardMarkup(resize_keyboard=True)
encrypt_per_ru = types.KeyboardButton('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µüìï')
decrypt_per_ru = types.KeyboardButton('–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µüìó')
back_to_method_ru_for_per = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥üö™') 
per_ru.add(encrypt_per_ru)
per_ru.add(decrypt_per_ru)
per_ru.add(back_to_method_ru_for_per)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∫–∏/–¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è –ê—Ñ–∏–Ω–Ω–æ–≥–æ —à–∏—Ñ—Ä–∞ EN
aphine_en = types.ReplyKeyboardMarkup(resize_keyboard=True)
encrypt_aphine_en = types.KeyboardButton('Encryptionüê∂')
decrypt_aphine_en = types.KeyboardButton('Decryptionü¶ä')
back_to_method_en_for_aphine = types.KeyboardButton('Back to listüëàüèª')
aphine_en.add(encrypt_aphine_en)
aphine_en.add(decrypt_aphine_en)
aphine_en.add(back_to_method_en_for_aphine)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∫–∏/–¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è –ê—Ñ–∏–Ω–Ω–æ–≥–æ —à–∏—Ñ—Ä–∞ RU
aphine_ru = types.ReplyKeyboardMarkup(resize_keyboard=True)
encrypt_aphine_ru = types.KeyboardButton('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µüê∂')
decrypt_aphine_ru = types.KeyboardButton('–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µü¶ä')
back_to_method_ru_for_aphine = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥üëàüèª') 
aphine_ru.add(encrypt_aphine_ru)
aphine_ru.add(decrypt_aphine_ru)
aphine_ru.add(back_to_method_ru_for_aphine)

@bot.message_handler(commands=['start'])  
def start_command(message):
	chat_id = message.chat.id
	bot.send_message(chat_id, f"üíÅüèª‚Äç‚ôÄÔ∏è –ü—Ä–∏–≤–µ—Ç, *{message.from_user.first_name}*!\n\n–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!"
		+ "–¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å —à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–µ–∫—Ä–µ—Ç—ãüò±\n–ö–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–ºüá∫üá∏ —Ç–∞–∫ –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µüá∑üá∫.\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è‚ù§Ô∏è!",
		parse_mode="Markdown", reply_markup=leng)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    text = message.text
    if message.text == '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫üá∑üá∫':
        bot.send_message(message.chat.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞', reply_markup=cipher_ru)
        
    elif message.text == 'English languageüá∫üá∏':
        bot.send_message(message.chat.id, 'You have entered the English language interface', reply_markup=cipher_en)
        
    elif message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞', reply_markup=leng)
    
    elif message.text == 'Back':
        bot.send_message(message.chat.id, 'You are returned to the language selection menu', reply_markup=leng)
        
    #–®–∏—Ñ—Ä –ø—Ä–æ—Ç–æ–π –∑–∞–º–µ–Ω—ã
    elif text == 'Simple replacement cipher':
        bot.send_message(message.chat.id, 'üíÅüèª‚Äç‚ôÄÔ∏è Would you like to Encrypt or Decrypt?', reply_markup=sr_en)
        
    elif message.text == 'Simple replacement encryption‚ù§Ô∏è':
        msg = bot.send_message(message.chat.id, 'Enter the text you want to\nEncrypt‚úÖ', parse_mode="Markdown")
        bot.register_next_step_handler(msg, sreen)
        
    elif message.text == 'Decryption by simple replacementüíú':
        msg = bot.send_message(message.chat.id, 'Enter the text you want to\nDecrypt‚úÖ')
        bot.register_next_step_handler(msg, srden)
        
    elif message.text == 'Back to choosing the encryption method':
        bot.send_message(message.chat.id, 'You are back to choosing the encryption method‚úÖ', reply_markup=cipher_en)
        
    elif text == '–®–∏—Ñ—Ä –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω—ã':
        bot.send_message(message.chat.id, 'üíÅüèª‚Äç‚ôÄÔ∏è –ß–µ–≥–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª? –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å?', reply_markup=sr_ru)
        
    elif message.text == '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω–æ–π‚ù§Ô∏è':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ\n–®–∏—Ñ—Ä–æ–≤–∞—Ç—å‚úÖ')
        bot.register_next_step_handler(msg, sreru)
        
    elif message.text == '–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω–æ–πüíú':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ\n–î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å‚úÖ')
        bot.register_next_step_handler(msg, srdru)
        
    elif message.text == '–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è':
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è‚úÖ', reply_markup=cipher_ru)
    
    #–®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞
    elif text == 'Vigen√®re cipher':
        bot.send_message(message.chat.id, 'üíÅüèª‚Äç‚ôÄÔ∏è Would you like to Encrypt or\nDecrypt?', reply_markup=vig_en)
        
    elif message.text == 'Encryption by Vigen√®re‚ù§Ô∏è':
        msg = bot.send_message(message.chat.id, 'Enter the text you want to\nEncrypt‚úÖ', parse_mode="Markdown")
        bot.register_next_step_handler(msg, vigeen)
        
    elif message.text == 'Decryption by Vigen√®reüíú':
        msg = bot.send_message(message.chat.id, 'Enter the text you want to\nDecrypt‚úÖ')
        bot.register_next_step_handler(msg, vigden)
        
    elif message.text == 'Back to list':
        bot.send_message(message.chat.id, 'You are back to choosing the encryption method‚úÖ', reply_markup=cipher_en)
        
    elif text == '–®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞':
        bot.send_message(message.chat.id, 'üíÅüèª‚Äç‚ôÄÔ∏è –ß–µ–≥–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª? –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å?', reply_markup=vig_ru)
        
    elif message.text == '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –í–∏–∂–µ–Ω–µ—Ä–æ–º‚ù§Ô∏è':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ\n–®–∏—Ñ—Ä–æ–≤–∞—Ç—å‚úÖ')
        bot.register_next_step_handler(msg, vigeru)
        
    elif message.text == '–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –í–∏–∂–µ–Ω–µ—Ä–æ–ºüíú':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ\n–î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å‚úÖ')
        bot.register_next_step_handler(msg, vigdru)
        
    elif message.text == '–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è‚úÖ', reply_markup=cipher_ru)
        
    #–®–∏—Ñ—Ä –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
    elif text == 'Simple permutation cipher':
        bot.send_message(message.chat.id, 'üíÅüèª‚Äç‚ôÄÔ∏è Would you like to Encrypt or\nDecrypt?', reply_markup=per_en)
        
    elif message.text == 'Encryptionüìï':
        msg = bot.send_message(message.chat.id, 'Enter the text you want to\nEncrypt‚úÖ', parse_mode="Markdown")
        bot.register_next_step_handler(msg, pereen)
        
    elif message.text == 'Decryptionüìó':
        msg = bot.send_message(message.chat.id, 'Enter the text you want to\nDecrypt‚úÖ')
        bot.register_next_step_handler(msg, perden)
        
    elif message.text == 'Back to listüö™':
        bot.send_message(message.chat.id, 'You are back to choosing the encryption method‚úÖ', reply_markup=cipher_en)
        
    elif text == '–®–∏—Ñ—Ä –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏':
        bot.send_message(message.chat.id, 'üíÅüèª‚Äç‚ôÄÔ∏è –ß–µ–≥–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª? –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å?', reply_markup=per_ru)
        
    elif message.text == '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µüìï':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ\n–®–∏—Ñ—Ä–æ–≤–∞—Ç—å‚úÖ')
        bot.register_next_step_handler(msg, pereru)
        
    elif message.text == '–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µüìó':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ\n–î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å‚úÖ')
        bot.register_next_step_handler(msg, perdru)
        
    elif message.text == '–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥üö™':
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è‚úÖ', reply_markup=cipher_ru)
#–î–ª—è —à–∏—Ñ—Ä–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω—ã
def sreen(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, encrypt(message.text))

def srden(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, decrypt(message.text))

def sreru(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, ruencrypt(message.text))

def srdru(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, rudecrypt(message.text))

#–î–ª—è —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞
def vigeen(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, vigener_en(message.text))

def vigden(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, vig_decrypt_en(message.text))

def vigeru(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, vigener_ru(message.text))

def vigdru(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, vig_decrypt_ru(message.text))
        
#–î–ª—è —à–∏—Ñ—Ä–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω—ã
def pereen(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, encrypt_per_en(message.text))

def perden(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, decrypt_per_en(message.text))

def pereru(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, encrypt_per_ru(message.text))

def perdru(message):
    text = message.text
    if message.text:
        bot.send_message(message.chat.id, decrypt_per_ru(message.text))

#–î–ª—è —à–∏—Ñ—Ä–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–º–µ–Ω—ã
def encrypt(text):
    text = text.upper()
    reg = re.compile('[^A-Z]')
    text = reg.sub('', text)
    alphabet = 'CDEFGHIJKLMNOPQRSTUVWXYZAB'
    alp = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    textEncrypted = ""
    for i in text:
        textEncrypted += alphabet[alp.index(i)]
    return textEncrypted

def decrypt(text):
    text = text.upper()
    reg = re.compile('[^A-Z]')
    text = reg.sub('', text)
    alphabet = 'CDEFGHIJKLMNOPQRSTUVWXYZAB'
    alp = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    textDecrypted = ""
    for i in text:
        textDecrypted += alp[alphabet.index(i)]
    return textDecrypted
    
def ruencrypt(text):
    text = text.upper()
    reg = re.compile('[^–ê-–Ø]')
    text = reg.sub('', text)
    alphabet = '–õ–ú–ó–ê–ò–ï–£–ö–•–≠–ù–í–ß–†–¨–ì–ü–´–î–û–©–Ø–Å–§–ñ–Æ–ô–ë–¢–™–°–®–¶'
    alp = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    RUtextEncrypted = ""
    for i in text:
        RUtextEncrypted += alphabet[alp.index(i)]
    return RUtextEncrypted

def rudecrypt(text):
    text = text.upper()
    reg = re.compile('[^–ê-–Ø]')
    text = reg.sub('', text)
    alphabet = '–õ–ú–ó–ê–ò–ï–£–ö–•–≠–ù–í–ß–†–¨–ì–ü–´–î–û–©–Ø–Å–§–ñ–Æ–ô–ë–¢–™–°–®–¶'
    alp = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    RUtextDecrypted = ""
    for i in text:
        RUtextDecrypted += alp[alphabet.index(i)]
    return RUtextDecrypted
    
#–î–ª—è —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞
def vigener_en(text):
    text = text.upper()
    reg = re.compile('[^A-Z]')
    text = reg.sub('', text)
    key = 'MOLOKO'
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    key *= len(text) // len(key) + 1
    Encrypt = ''
    for i, j in enumerate(text):
        gg = alphabet.index(j) + alphabet.index(key[i])
        Encrypt += alphabet[gg % 26]
    return Encrypt
    
def vig_decrypt_en(text):
    text = text.upper()
    reg = re.compile('[^A-Z]')
    text = reg.sub('', text)
    key = 'MOLOKO'
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    key *= len(text) // len(key) + 1
    Decrypted = '' 
    for i, j in enumerate(text):
        gg = alphabet.index(j) - alphabet.index(key[i])
        Decrypted += alphabet[gg % 26]
    return Decrypted
    
def vigener_ru(text):
    text = text.upper()
    reg = re.compile('[^–ê-–Ø]')
    text = reg.sub('', text)
    key = '–ú–û–õ–û–ö–û'
    alphabet = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    key *= len(text) // len(key) + 1
    Encrypt = ''
    for i, j in enumerate(text):
        gg = alphabet.index(j) + alphabet.index(key[i])
        Encrypt += alphabet[gg % 33]
    return Encrypt
    
def vig_decrypt_ru(text):
    text = text.upper()
    reg = re.compile('[^–ê-–Ø]')
    text = reg.sub('', text)
    key = '–ú–û–õ–û–ö–û'
    key *= len(text) // len(key) + 1
    Decrypted = ''
    alphabet = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    for i, j in enumerate(text):
        gg = alphabet.index(j) - alphabet.index(key[i])
        Decrypted += alphabet[gg % 33]
    return Decrypted
    
#–§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
def encrypt_per_en(message):
    message = message.upper()
    reg = re.compile('[^A-Z]')
    message = reg.sub('', message)
    key = "CODE"
    cipher = ""
    k_indx = 0
    msg_len = float(len(message))
    msg_lst = list(message)
    key_lst = sorted(list(key))
    col = len(key)
    row = int(math.ceil(msg_len / col))
    fill_null = int((row * col) - msg_len)
    msg_lst.extend('_' * fill_null)
    matrix = [msg_lst[i: i + col]
              for i in range(0, len(msg_lst), col)]
    for _ in range(col):
        curr_idx = key.index(key_lst[k_indx])
        cipher += ''.join([row[curr_idx]
                           for row in matrix])
        k_indx += 1

    return cipher


#–§—É–Ω–∫—Ü–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
def decrypt_per_en(message):
    message = message.upper()
    reg = re.compile('[^A-Z]')
    message = reg.sub('', message)
    key = "CODE"    
    msg = ""
    k_indx = 0
    msg_indx = 0
    msg_len = float(len(message))
    msg_lst = list(message)
    col = len(key)
    row = int(math.ceil(msg_len / col))
    key_lst = sorted(list(key))
    dec_cipher = []
    for _ in range(row):
        dec_cipher += [[None] * col]
    for _ in range(col):
        curr_idx = key.index(key_lst[k_indx])

        for j in range(row):
            dec_cipher[j][curr_idx] = msg_lst[msg_indx]
            msg_indx += 1
        k_indx += 1
    try:
        msg = ''.join(sum(dec_cipher, []))
    except TypeError:
        return "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è üòî"
    null_count = msg.count('_')
    if null_count > 0:
        return msg[: -null_count]

    return msg


def encrypt_per_ru(message):
    message = message.upper()
    reg = re.compile('[^–ê-–Ø]')
    message = reg.sub('', message)
    key = "–ö–û–î–ê"
    cipher = ""
    k_indx = 0
    msg_len = float(len(message))
    msg_lst = list(message)
    key_lst = sorted(list(key))
    col = len(key)
    row = int(math.ceil(msg_len / col))
    fill_null = int((row * col) - msg_len)
    msg_lst.extend('_' * fill_null)
    matrix = [msg_lst[i: i + col]
              for i in range(0, len(msg_lst), col)]
    for _ in range(col):
        curr_idx = key.index(key_lst[k_indx])
        cipher += ''.join([row[curr_idx]
                           for row in matrix])
        k_indx += 1

    return cipher

#–§—É–Ω–∫—Ü–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
def decrypt_per_ru(message):
    message = message.upper()
    reg = re.compile('[^–ê-–Ø]')
    message = reg.sub('', message)
    key = "–ö–û–î–ê"
    msg = ""
    k_indx = 0
    msg_indx = 0
    msg_len = float(len(message))
    msg_lst = list(message)
    col = len(key)
    row = int(math.ceil(msg_len / col))
    key_lst = sorted(list(key))
    dec_cipher = []
    for _ in range(row):
        dec_cipher += [[None] * col]
    for _ in range(col):
        curr_idx = key.index(key_lst[k_indx])

        for j in range(row):
            dec_cipher[j][curr_idx] = msg_lst[msg_indx]
            msg_indx += 1
        k_indx += 1
    try:
        msg = ''.join(sum(dec_cipher, []))
    except TypeError:
        return "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è üòî"
    null_count = msg.count('_')
    if null_count > 0:
        return msg[: -null_count]

    return msg

if __name__ == '__main__':
    bot.polling(none_stop=True)